/**
 * Script para verificar se a aplica√ß√£o est√° pronta para produ√ß√£o no Fly.io
 * Identifica poss√≠veis problemas antes do deploy
 */

import fs from 'fs';
import path from 'path';

console.log('üîç Verificando prepara√ß√£o para produ√ß√£o Fly.io...\n');

const checks = [];
let hasErrors = false;

// 1. Verificar se o build foi gerado
function checkBuildExists() {
  const distPath = path.join(process.cwd(), 'dist');
  const publicPath = path.join(distPath, 'public');
  const indexJs = path.join(distPath, 'index.js');
  const indexHtml = path.join(publicPath, 'index.html');
  
  if (fs.existsSync(distPath)) {
    checks.push('‚úÖ Diret√≥rio dist/ existe');
    
    if (fs.existsSync(indexJs)) {
      checks.push('‚úÖ arquivo dist/index.js existe');
    } else {
      checks.push('‚ùå arquivo dist/index.js n√£o existe');
      hasErrors = true;
    }
    
    if (fs.existsSync(publicPath)) {
      checks.push('‚úÖ Diret√≥rio dist/public/ existe');
      
      if (fs.existsSync(indexHtml)) {
        checks.push('‚úÖ arquivo dist/public/index.html existe');
      } else {
        checks.push('‚ùå arquivo dist/public/index.html n√£o existe');
        hasErrors = true;
      }
    } else {
      checks.push('‚ùå Diret√≥rio dist/public/ n√£o existe');
      hasErrors = true;
    }
  } else {
    checks.push('‚ùå Diret√≥rio dist/ n√£o existe - execute npm run build');
    hasErrors = true;
  }
}

// 2. Verificar configura√ß√µes do Fly.io
function checkFlyConfig() {
  const dockerfilePath = path.join(process.cwd(), 'Dockerfile');
  const flyTomlPath = path.join(process.cwd(), 'fly.toml');
  const dockerIgnorePath = path.join(process.cwd(), '.dockerignore');
  
  if (fs.existsSync(dockerfilePath)) {
    checks.push('‚úÖ Dockerfile existe');
    
    // Verificar se cont√©m depend√™ncias Sharp
    const dockerContent = fs.readFileSync(dockerfilePath, 'utf-8');
    if (dockerContent.includes('libjpeg-dev') && dockerContent.includes('libpng-dev')) {
      checks.push('‚úÖ Dockerfile inclui depend√™ncias Sharp');
    } else {
      checks.push('‚ö†Ô∏è Dockerfile pode n√£o incluir todas as depend√™ncias Sharp');
    }
  } else {
    checks.push('‚ùå Dockerfile n√£o existe');
    hasErrors = true;
  }
  
  if (fs.existsSync(flyTomlPath)) {
    checks.push('‚úÖ fly.toml existe');
  } else {
    checks.push('‚ùå fly.toml n√£o existe');
    hasErrors = true;
  }
  
  if (fs.existsSync(dockerIgnorePath)) {
    checks.push('‚úÖ .dockerignore existe');
  } else {
    checks.push('‚ö†Ô∏è .dockerignore n√£o existe (recomendado)');
  }
}

// 3. Verificar depend√™ncias cr√≠ticas
function checkDependencies() {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
    const deps = packageJson.dependencies || {};
    
    // Verificar depend√™ncias cr√≠ticas
    const criticalDeps = ['express', 'sharp', '@neondatabase/serverless', 'ws'];
    
    criticalDeps.forEach(dep => {
      if (deps[dep]) {
        checks.push(`‚úÖ Depend√™ncia ${dep} presente`);
      } else {
        checks.push(`‚ùå Depend√™ncia cr√≠tica ${dep} n√£o encontrada`);
        hasErrors = true;
      }
    });
    
    // Verificar se Sharp est√° em dependencies (n√£o devDependencies)
    if (packageJson.devDependencies && packageJson.devDependencies.sharp) {
      checks.push('‚ö†Ô∏è Sharp est√° em devDependencies - pode causar problemas em produ√ß√£o');
    }
    
  } else {
    checks.push('‚ùå package.json n√£o existe');
    hasErrors = true;
  }
}

// 4. Verificar vari√°veis de ambiente necess√°rias
function checkEnvironmentVars() {
  const requiredEnvVars = ['DATABASE_URL'];
  const optionalEnvVars = ['MAILGUN_API_KEY', 'MAILGUN_DOMAIN'];
  
  checks.push('\nüìã Vari√°veis de ambiente necess√°rias para Fly.io:');
  
  requiredEnvVars.forEach(envVar => {
    checks.push(`  ${envVar} (obrigat√≥ria)`);
  });
  
  optionalEnvVars.forEach(envVar => {
    checks.push(`  ${envVar} (opcional)`);
  });
  
  checks.push('\nDefina com: flyctl secrets set NOME="valor"');
}

// 5. Verificar arquivos cr√≠ticos do servidor
function checkServerFiles() {
  const criticalFiles = [
    'server/index.ts',
    'server/db.ts',
    'server/storage.ts',
    'server/routes.ts'
  ];
  
  criticalFiles.forEach(file => {
    if (fs.existsSync(path.join(process.cwd(), file))) {
      checks.push(`‚úÖ ${file} existe`);
    } else {
      checks.push(`‚ùå ${file} n√£o existe`);
      hasErrors = true;
    }
  });
}

// Executar todas as verifica√ß√µes
checkBuildExists();
checkFlyConfig();
checkDependencies();
checkServerFiles();
checkEnvironmentVars();

// Exibir resultados
console.log(checks.join('\n'));

if (hasErrors) {
  console.log('\nüö® ERROS ENCONTRADOS - Corrija antes do deploy');
  console.log('\nSugest√µes:');
  console.log('1. Execute: npm run build');
  console.log('2. Verifique se todos os arquivos necess√°rios existem');
  console.log('3. Configure as vari√°veis de ambiente no Fly.io');
  process.exit(1);
} else {
  console.log('\n‚úÖ Aplica√ß√£o parece estar pronta para deploy no Fly.io!');
  console.log('\nPara fazer o deploy:');
  console.log('1. flyctl auth login');
  console.log('2. flyctl secrets set DATABASE_URL="sua_url"');
  console.log('3. flyctl deploy');
  process.exit(0);
}