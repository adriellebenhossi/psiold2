/**
 * Teste completo de prontid√£o para produ√ß√£o
 * Simula cen√°rios reais que podem falhar no Fly.io
 */

import express from 'express';
import path from 'path';
import fs from 'fs';

const app = express();
let server;

console.log('üß™ Testando prontid√£o para produ√ß√£o Fly.io...\n');

// Simular vari√°veis de ambiente de produ√ß√£o
process.env.NODE_ENV = 'production';
process.env.PORT = '3001'; // Porta teste
process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test'; // URL fict√≠cia para teste

async function runTests() {
  let allTestsPassed = true;
  
  // 1. Teste: Importa√ß√£o do servidor principal
  console.log('üîß Teste 1: Importa√ß√£o do servidor...');
  try {
    // Simular importa√ß√£o din√¢mica como seria no Fly.io
    const serverModule = await import('./dist/index.js');
    console.log('‚úÖ Servidor importado com sucesso');
  } catch (error) {
    console.log('‚ùå Falha na importa√ß√£o do servidor:', error.message);
    allTestsPassed = false;
  }

  // 2. Teste: Verificar se Sharp est√° dispon√≠vel
  console.log('üñºÔ∏è Teste 2: Disponibilidade do Sharp...');
  try {
    const sharp = await import('sharp');
    console.log('‚úÖ Sharp importado com sucesso');
    
    // Teste b√°sico do Sharp
    const testSvg = '<svg width="32" height="32"><rect width="32" height="32" fill="blue"/></svg>';
    const pngBuffer = await sharp.default(Buffer.from(testSvg))
      .resize(32, 32)
      .png()
      .toBuffer();
    console.log('‚úÖ Sharp funciona corretamente');
  } catch (error) {
    console.log('‚ùå Problema com Sharp:', error.message);
    console.log('‚ö†Ô∏è Aplica√ß√£o funcionar√°, mas gera√ß√£o de √≠cones ser√° desabilitada');
  }

  // 3. Teste: Verificar arquivos est√°ticos de produ√ß√£o
  console.log('üìÇ Teste 3: Arquivos est√°ticos...');
  const staticPaths = [
    './dist/public/index.html',
    './dist/public/assets', // Diret√≥rio de assets do Vite
  ];
  
  staticPaths.forEach(staticPath => {
    if (fs.existsSync(staticPath)) {
      console.log(`‚úÖ ${staticPath} encontrado`);
    } else {
      console.log(`‚ùå ${staticPath} n√£o encontrado`);
      allTestsPassed = false;
    }
  });

  // 4. Teste: Verificar se websocket funciona
  console.log('üåê Teste 4: WebSocket...');
  try {
    const ws = await import('ws');
    console.log('‚úÖ WebSocket dispon√≠vel');
  } catch (error) {
    console.log('‚ùå Problema com WebSocket:', error.message);
    allTestsPassed = false;
  }

  // 5. Teste: Verificar Neon Database
  console.log('üíæ Teste 5: Driver de banco...');
  try {
    const { Pool } = await import('@neondatabase/serverless');
    console.log('‚úÖ Driver Neon dispon√≠vel');
  } catch (error) {
    console.log('‚ùå Problema com driver Neon:', error.message);
    allTestsPassed = false;
  }

  // 6. Teste: Verificar se compression funciona
  console.log('üóúÔ∏è Teste 6: Compress√£o...');
  try {
    const compression = await import('compression');
    console.log('‚úÖ Compress√£o dispon√≠vel');
  } catch (error) {
    console.log('‚ùå Problema com compress√£o:', error.message);
    allTestsPassed = false;
  }

  // 7. Teste: Simular requisi√ß√£o HTTP b√°sica
  console.log('üåç Teste 7: Servidor HTTP b√°sico...');
  try {
    app.get('/health', (req, res) => {
      res.json({ status: 'ok', env: process.env.NODE_ENV });
    });
    
    server = app.listen(3001, () => {
      console.log('‚úÖ Servidor teste iniciado na porta 3001');
    });
    
    // Fazer requisi√ß√£o teste
    const response = await fetch('http://localhost:3001/health');
    const data = await response.json();
    
    if (data.status === 'ok') {
      console.log('‚úÖ Requisi√ß√£o HTTP funcionando');
    } else {
      console.log('‚ùå Resposta HTTP incorreta');
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('‚ùå Problema com servidor HTTP:', error.message);
    allTestsPassed = false;
  }

  // Finalizar
  if (server) {
    server.close();
  }

  console.log('\n' + '='.repeat(50));
  if (allTestsPassed) {
    console.log('üéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Aplica√ß√£o est√° pronta para deploy no Fly.io');
    console.log('\nComandos para deploy:');
    console.log('1. flyctl auth login');
    console.log('2. flyctl secrets set DATABASE_URL="sua_url_real"');
    console.log('3. flyctl deploy');
  } else {
    console.log('üö® ALGUNS TESTES FALHARAM');
    console.log('‚ùå Corrija os problemas antes do deploy');
    console.log('\nVerifique:');
    console.log('- Se npm run build foi executado');
    console.log('- Se todas as depend√™ncias est√£o instaladas');
    console.log('- Se o Dockerfile cont√©m todas as depend√™ncias nativas');
  }
  
  process.exit(allTestsPassed ? 0 : 1);
}

runTests().catch(console.error);